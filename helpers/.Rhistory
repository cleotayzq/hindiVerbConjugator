<td style="vertical-align: middle;"><b>Masc</b></td>
<td>', pronounList1["sing_1_m"], '</td>
<td colspan="2">', pronounList1["sing_23_m"], '</td>
<td>', pronounList1["plur_2_m"], '</td>
<td colspan="3">', pronounList1["plur_123_m"], '</td>
</tr>
<tr>
<td style="vertical-align: middle;"><b>Fem</b></td>
<td>', pronounList1["sing_1_f"], '</td>
<td colspan="2">', pronounList1["sing_23_f"], '</td>
<td>', pronounList1["sing_23_f"], '</td>
<td colspan="3">', pronounList1["plur_123_f"], '</td>
</tr>
</table>'
)
return(htmlTable)
}
createTable1("x", "x", "present", "x")
conjugateHona <- function(conjugationType, tense) {
# types of conjugations: c("sing_1_m", "sing_23_m", "plur_2_m", "plur_123_m", "sing_1_f", "sing_23_f", "plur_2_f", "plur_123_f")
# types of tenses: c("past", "present", "future")
number = strsplit(conjugationType, "_")[[1]][1]
person = strsplit(conjugationType, "_")[[1]][2]
gender = strsplit(conjugationType, "_")[[1]][3]
if (tense == "present") {
if (person == "1") {
rom = "hū̃"
dev = "हूँ"
} else if (person == "23") {
rom = "hai"
dev = "है"
} else if (person == "2") {
rom = "ho"
dev = "हो"
} else if (person == "123") {
rom = "hain"
dev = "हैं"
}
} else if (tense == "future") {
# in two parts e.g. hoga
if (person == "1") {
rom_first = "hū̃"
dev_first = "हूँ"
} else if (person == "23" | person == "2") {
rom_first = "ho"
dev_first = "हो"
} else if (person == "123") {
rom_first = "hõ"
dev_first = "हों"
}
if (gender == "f") {
rom_second = "gī"
dev_second = "गी"
} else if (gender == "m") {
if (number == "sing") {
rom_second = "gā"
dev_second = "गा"
} else if (number == "plur") {
rom_second = "ge"
dev_second = "गे"
}
}
rom = paste0(rom_first, rom_second)
dev = paste0(dev_first, dev_second)
} else if (tense == "past") {
if (gender == "m") {
if (number == "sing") {
rom = "thā"
dev = "था"
} else if (number == "plur") {
rom = "the"
dev = "थे"
}
} else if (gender == "f") {
if (number == "sing" | person == "2") {
rom = "thī"
dev = "थी"
} else if (person == "123") {
rom = "thī̃"
dev = "थीं"
}
}
}
return(c(dev, rom))
}
for (conjugation in conjugationsType1) {
for (tense in c("past", "present", "future")) {
print(conjugateHona(conjugation, tense))
}
}
for (conjugation in conjugationsType1) {
print(conjugation)
for (tense in c("past", "present", "future")) {
print(tense)
print(conjugateHona(conjugation, tense))
}
}
conjugateHona <- function(conjugationType, tense) {
# types of conjugations: c("sing_1_m", "sing_23_m", "plur_2_m", "plur_123_m", "sing_1_f", "sing_23_f", "plur_2_f", "plur_123_f")
# types of tenses: c("past", "present", "future")
number = strsplit(conjugationType, "_")[[1]][1]
person = strsplit(conjugationType, "_")[[1]][2]
gender = strsplit(conjugationType, "_")[[1]][3]
if (tense == "present") {
if (person == "1") {
rom = "hū̃"
dev = "हूँ"
} else if (person == "23") {
rom = "hai"
dev = "है"
} else if (person == "2") {
rom = "ho"
dev = "हो"
} else if (person == "123") {
rom = "hain"
dev = "हैं"
}
} else if (tense == "future") {
# in two parts e.g. hoga
if (person == "1") {
rom_first = "hūṅ"
dev_first = "हूँ"
} else if (person == "23" | person == "2") {
rom_first = "ho"
dev_first = "हो"
} else if (person == "123") {
rom_first = "hoṅ"
dev_first = "हों"
}
if (gender == "f") {
rom_second = "gī"
dev_second = "गी"
} else if (gender == "m") {
if (number == "sing") {
rom_second = "gā"
dev_second = "गा"
} else if (number == "plur") {
rom_second = "ge"
dev_second = "गे"
}
}
rom = paste0(rom_first, rom_second)
dev = paste0(dev_first, dev_second)
} else if (tense == "past") {
if (gender == "m") {
if (number == "sing") {
rom = "thā"
dev = "था"
} else if (number == "plur") {
rom = "the"
dev = "थे"
}
} else if (gender == "f") {
if (number == "sing" | person == "2") {
rom = "thī"
dev = "थी"
} else if (person == "123") {
rom = "thī̃"
dev = "थीं"
}
}
}
return(c(dev, rom))
}
for (conjugation in conjugationsType1) {
print(conjugation)
for (tense in c("past", "present", "future")) {
print(tense)
print(conjugateHona(conjugation, tense))
}
}
runApp()
runApp()
conjugationsType1
runApp()
honaList1
View(pronounList1)
pronounList1
runApp()
runApp()
runApp()
htmlTable <- paste(
'<table class="table table-bordered">
<tr>
<td style="border: none;"></td>
<td colspan="3"><b>Singular</b></td>
<td colspan="4"><b>Plural</b></td>
</tr>
<tr>
<td style="border: none; font-weight: bold;"></td>
<td><b>मैं</b></td>
<td><b>तू</b></td>
<td><b>यह/वह</b></td>
<td><b>तुम</b></td>
<td><b>आप</b></td>
<td><b>हम</b></td>
<td><b>ये/वे</b></td>
</tr>
<tr>
<td style="vertical-align: middle;"><b>Masc</b></td>
<td>', pronounList1["sing_1_m"], '</td>
<td colspan="2">', pronounList1["sing_23_m"], '</td>
<td>', pronounList1["plur_2_m"], '</td>
<td colspan="3">', pronounList1["plur_123_m"], '</td>
</tr>
<tr>
<td style="vertical-align: middle;"><b>Fem</b></td>
<td>', pronounList1["sing_1_f"], '</td>
<td colspan="2">', pronounList1["sing_23_f"], '</td>
<td>', pronounList1["plur_2_f"], '</td>
<td colspan="3">', pronounList1["plur_123_f"], '</td>
</tr>
</table>'
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyBS")
library(shinyBS)
?bsTooltip
bsExample("Tooltips_and_Popovers")
runApp()
runApp()
runApp()
bsExample("Tooltips_and_Popovers")
runApp()
runApp()
runApp()
runApp()
runApp()
bsExample("Tooltips_and_Popovers")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ā
ā
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
"ā", "i", "ī",
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
number = strsplit(conjugationType, "_")[[1]][1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
htmlTable <- paste(
'<table class="table table-bordered">
<tr>
<td style="border: none;"><b>Subject</b></td>
<td colspan="3"><b>Singular</b></td>
<td colspan="4"><b>Plural</b></td>
</tr>
<tr>
<td style="border: none; font-weight: bold;"></td>
<td><b>मैं</b></td>
<td><b>तू</b></td>
<td><b>यह/वह</b></td>
<td><b>तुम</b></td>
<td><b>आप</b></td>
<td><b>हम</b></td>
<td><b>ये/वे</b></td>
</tr>
<tr>
<td style="vertical-align: middle;"><b>Masc</b></td>
<td colspan="3">', pronounList2["sing_23_m"], '</td>
<td colspan="4">', pronounList2["plur_123_m"], '</td>
</tr>
<tr>
<td style="vertical-align: middle;"><b>Fem</b></td>
<td colspan="4">', pronounList2["sing_23_f"], '</td>
<td colspan="3">', pronounList2["plur_123_f"], '</td>
</tr>
</table>'
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
conjugationsTypeChuk <- c("sing_23_m", "plur_123_m", "sing_23_f", "plur_123_f")
honaListChuk <- list()
aspectListChuk <- list()
pronounListChuk <- list()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
htmlTable <- paste(
'<table class="table table-bordered">
<tr>
<td colspan="8"><b>Subject</b> + Object + Verb Conjugation</td>
</tr>
<tr>
<td style="border: none;"></td>
<td colspan="3"><b>Singular</b></td>
<td colspan="4"><b>Plural</b></td>
</tr>
<tr>
<td style="border: none; font-weight: bold;">Subject</td>
<td><b>मैं</b></td>
<td><b>तू</b></td>
<td><b>यह/वह</b></td>
<td><b>तुम</b></td>
<td><b>आप</b></td>
<td><b>हम</b></td>
<td><b>ये/वे</b></td>
</tr>
<tr>
<td style="vertical-align: middle;"><b>Masc</b></td>
<td>', pronounList1["sing_1_m"], '</td>
<td colspan="2">', pronounList1["sing_23_m"], '</td>
<td>', pronounList1["plur_2_m"], '</td>
<td colspan="3">', pronounList1["plur_123_m"], '</td>
</tr>
<tr>
<td style="vertical-align: middle;"><b>Fem</b></td>
<td>', pronounList1["sing_1_f"], '</td>
<td colspan="2">', pronounList1["sing_23_f"], '</td>
<td>', pronounList1["plur_2_f"], '</td>
<td colspan="3">', pronounList1["plur_123_f"], '</td>
</tr>
</table>'
)
runApp()
runApp()
library(rvest)
scrape_wiktionary <- function(word) {
url <- paste0("https://en.wiktionary.org/wiki/", URLencode(word))
wrong_langs <- c("Marathi", "Nepali", "Sanskrit", "Mewari")
tryCatch(
{
page <- read_html(url)
langugage_elements <- html_elements(page, 'h2 .mw-headline') %>%
html_text()
hindi_element <- "Hindi" %in% langugage_elements
verb_element <- html_elements(page, '[id^="Verb"]')
if (hindi_element) { # if page has hindi
if (length(verb_element) > 0) { # if page has a verb
ol_elements <- page %>%
html_elements("p + ol > li") %>%
# html_elements('h2:has("#Hindi") ~ :is("h3, h4"):has("[id^="Verb"]") + p + ol > li') %>%
html_text()
formatted_element <- "<ul>"
for (ol_element in ol_elements) {
lines <- strsplit(ol_element, "\n")[[1]]
line_def <- lines[1]
if (length(lines) == 1) {
formatted_element <- paste0(formatted_element,
"<li>", line_def, "</li>")
} else if (length(lines) > 1){
formatted_element <- paste0(formatted_element,
"<li>", line_def,
"<ul>")
for (line_index in 2:length(lines)){
line <- lines[line_index]
if (!grepl("\\d", line)) {
formatted_element <- paste0(formatted_element,
"<li>", line, "</li>")
}
}
formatted_element <- paste0(formatted_element, "</ul></li>")
}
}
formatted_element <- paste0(formatted_element, "</ul>")
return(formatted_element)
} else {
return("Error: Not a verb.\n")
}
} else {
return("Error: Does not have a Hindi Definition.\n")
}
},
error = function(e) {
if (grepl("error 404", e$message)) {
return("Error: Word does not exist.")
} else {
return(e$message)
}
})
}
setwd("/Users/cleotay/Downloads")
verbs <- read.csv("transivity.csv")
verbs <- read.csv("transitivity.csv")
View(verbs)
for (i in 1:nrow(verbs)) {
verbs$Definition[i] <- scrape_wiktionary(verbs$Stem[i])
}
for (i in 1:nrow(verbs)) {
verb_inf <- paste0(verbs$Stem[i],"ना")
verbs$Definition[i] <- scrape_wiktionary(verb_inf)
}
write.csv(verbs, "verblist_2024-03-21.csv", row.names = F)
existing_verbs <- read.csv("verblist_2024-03-21.csv")
setwd("~/Dropbox/GitHub/hindiVerbConjugator/helpers")
existing_verbs <- read.csv("verblist_2024-03-21.csv")
View(existing_verbs)
runApp('~/Dropbox/GitHub/hindiVerbConjugator')
runApp('~/Dropbox/GitHub/hindiVerbConjugator')
runApp('~/Dropbox/GitHub/hindiVerbConjugator')
runApp('~/Dropbox/GitHub/hindiVerbConjugator')
runApp('~/Dropbox/GitHub/hindiVerbConjugator')
